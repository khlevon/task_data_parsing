import db from "./Database";
import { TStructuredData } from "./DataParser";
import { IGift, IOrder, IUser } from "../entities";
import { User, Gift, Order } from "../models";

export const insertUsers = async (
  data: TStructuredData
): Promise<{ [tmp_id: number]: IUser }> => {
  /**
   * This function inserts users to database and returns a map of autogenerated ids to inserted user objects
   * to prevent querying the database for a user information multiple times during gifts and orders insertion
   */

  const { users } = data;

  /**
   * Users insertion process done using transaction to abort insertion process if there is a user with the same number
   * in this case will be good to check data manually or need to specify scenario for this case
   */

  await db.beginTransaction();
  try {
    const dataEntries = Object.entries(users);

    const usersData = await Promise.all(
      Object.values(dataEntries).map(([_, user]) =>
        User.create(user.name, user.number)
      )
    );

    await db.commit();

    const usersMap: { [tmp_id: number]: IUser } = {};

    for (let i = 0; i < usersData.length; i++) {
      usersMap[dataEntries[i][0]] = usersData[i];
    }

    return usersMap;
  } catch (e) {
    await db.rollback();
    throw e;
  }
};

export const insertGifts = async (
  data: TStructuredData
): Promise<{ [tmp_id: number]: IGift }> => {
  /**
   * This function inserts gifts to database using data returned by insertUsers() function
   * and returns a map of autogenerated ids to inserted gift objects
   */
  // TODO: will be goode to replace this part with bulk insertion logic and query
  const { gifts, users } = data;

  const dataEntries = Object.entries(gifts);

  const giftsData = await Promise.all(
    Object.values(dataEntries).map(([_, gift]) => {
      const fromId = gift.fromId ? users[gift.fromId]?.id : undefined;

      return Gift.create(gift.name, fromId);
    })
  );

  const giftsMap: { [tmp_id: number]: IGift } = {};

  for (let i = 0; i < giftsData.length; i++) {
    giftsMap[dataEntries[i][0]] = giftsData[i];
  }

  return giftsMap;
};

export const insertOrders = async (
  data: TStructuredData
): Promise<IOrder[]> => {
  /**
   * This function inserts orders to database using data returned by insertUsers() and insertGifts() functions
   * and returns the array of inserted orders
   */
  // TODO: will be goode to replace this part with bulk insertion logic and query
  const { orders, gifts, users } = data;

  const ordersData = await Promise.all(
    orders.map((order) => {
      const userId = order.userId ? users[order.userId]?.id : undefined;
      const giftId = order.giftId ? gifts[order.giftId]?.id : undefined;

      return Order.create(order.date, order.description, userId, giftId);
    })
  );

  return ordersData;
};
